
# Overview: QueueBroker / QueueMessages

implemented over Broker and Channels

A message queue is a communication channel, a point-to-point stream of messages.
Full-duplex, each end point can be used to receive or send.
A connected message queue is FIFO and lossless, see Section "clossing"
for details about closeing.

The typical use of message queues is by two tasks to establish a full-duplex communication. However, there is no ownership between message queue and tasks, any task may receive or send in any message queue it has the reference to. The following rules apply:

- It is entirely thread-safe for the two tasks to receive or send at either end point of the message queues concurrently. 
- Locally, at one end point, two tasks, one receiveing and the other writing, operating concurrently is safe also. 
- However, concurrent receive operations or concurrent send operations are not safe on the same end point.  

A message queue is either open or closed. It is created open and it becomes closed when either side requests a close. There is no notion of the end of stream for a connected stream. To mark the end of a stream, the corresponding message queue is simply closed.

# Connecting

A message queue is established, in a fully connected state, when a connect 
matches an accept. When connecting, the given name is the one of the remote broker, the given port is the one of an accept on that remote broker.

There is no precedence between connect and accept, this is a symmetrical rendez-vous: the first operation waits for the second one. Both accept and connect operations are therefore blocking calls, blocking until the rendez-vous happens, both returning a fully opened and usable full-duplex message queue.

When connecting, we may want to distinguish between two cases:
(i) there is no accept yet and (ii) there is not such broker. 
When the named broker does not exist, the connect returns null, 
but if the remote broker is found, the connect blocks until 
there is a matching accept otherwise so that a message queue can be
constructed and returned. 

Note: we could consider introducing a timeout here, limiting the wait for the rendez-vous to happen.

# Sending

Signature: void send (byte[] bytes, int offset, int length)

When sending, the given byte array contains the message to send
from the given offset and for the given length. The range [offset,offset+length[ must be within the array boundaries, without wrapping around at either ends. 


The method "send" blocks if there is no room to send a message.
The rationale is to avoid spinning when an application tries to send
a message.
Here is an example:


If the method "send" is currently blocked and the message queue becomes
closeed, the method will throw a message queue exception. Invoking a send operation on a closeed also throws a message queue exception.

# receiveing

Signature: byte[] receive()

When receiveing, the bytes array returned is a message.

The method "receive" will return a message as a bytes array.


The end of stream is the same as being as the message queue being closeed, so the method will throw an exception (closedException). 

Note: notice that the closed exception does not always indicate an error, rarely in fact. The end of stream is an exceptional situation, but it is not an error. Remember that exceptions are not only for errors, but for exceptional situations, hence their name.
The closed exception may give some extra information regarding an error if an internal error caused the message queue to close.   

# closing

A message queue can be closed at any time, from either side. So this requires an asynchronous protocol to close a message queue. 

The effect of closing a message queue must be specified for both ends, the one that called the method "close" as well as the other end. In the following, we will talk about the local side versus remote side, the local side being the end where the method "close" has been called.

Note: of course, both ends may call the method "close" concurrently and the protocol to close the message queue must still work.

Note: since we have not asserted a strict ownership model between tasks and message queues, it is possible that a message queue be closed
while some operations are pending locally. These operations must be interrupted, when appropriate, throwing a closed exception.

The local rule is simple, once the method "close" has been called on a message queue, it is illegal to invoke the methods "receive" or "send". Only the method "closed" may be called to check the status of the message queue. In other words, if the method "closed" returns true, the methods "receive" and "send" must not be invoked. If they are invoked nevertheless, the invocation will result in an closed
exception being thrown.

The remote rule is more complex to grasp, that is, when the remote side closes a message queue, how should that be perceived locally?

The main issue is that there may be still messages in transit, message that the local side must be able to receives. By in transit, we mean message that was written by that remote side, before it closed the message queue, and this message has not been received on a local side. 
Therefore, if we want the local side to be able to receive this last message, the local side should not be considered closed until all messages have been received or the message queue is locally closed.

This means that the local side will only become closed when the remote has been closed and there are no more in-transit message to receive. This means that a local message queue appears as not yet closed although its far side has alreceivey been closed. This means that we need to specify how should local send operations behave in 
this half-closeed state. The simplest is to drop the message silently, as if it was written, preserving the local illusion that the message queue is still connected. 

This behavior may seem counter-intuitive at first, but it is the only one that is consistent and it is in fact the easiest one on developers. First, allowing to receive the last message in transit is mandatory since it is likely that a communication will end by writing a messsage and then closing. Something like saying "bye" and 
then hanging up.

Second, dropping written message may seem wrong but it is just leveraging an unavoidable truth: written message may be dropped even though message queues are FIFO and lossless. Indeed, it is not at all different than if the message was written before the other side closed a message queue without receiveing all pending messages. In both cases, the message would be dropped.

Nota Bene: one should resist the temptation to adopt an immediate synchronous closing. Indeed, it would not be possible if our message queues would not be implemented over shared memory. closing would imply sending a control message to inform the other side and thus the close protocol would be asynchronous. 

# Brokers and Multi-tasking

The question about the relationship between tasks, brokers, and message queues.

Since a connect is blocking, a task may not try to connect to the same
name and port concurrently, but multiple tasks can. Similarly, only
one task may accept on a given port on a given broker. But different 
tasks on different brokers may accept on the same port number. And 
of course, multiple tasks may accept on different ports on the same
broker.

Since the operations "receive" and "send" may block the calling task,
it is important to specify what happens if the message queue is closed
while tasks are blocked. The blocked operations will throw an exception (closedException). This must happen when the message queue is closeed from either sides. This means that it is safe for a task to close a message queue on the same side that another task is currently blocked on.

We know that each task is related to a broker, by its constructor. But a broker can be used by multiple tasks. Therefore brokers may be shared between tasks, so brokers must be thread-safe, using proper synchronized internally.

"Receive" and "send" need to be synchronized operations would to help multiple tasks concurrently sending or receiving full messages. 

Multiple tasks may use the same message queue. One classical example is a receiveer task and a sender task, due to the blocking nature of the method "receive" and "send". Also, multiple sends may send messages through the same message queue if they are properly synchronized.



